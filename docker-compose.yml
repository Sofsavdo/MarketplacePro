version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: affilimart_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: affilimart
      POSTGRES_USER: affilimart_user
      POSTGRES_PASSWORD: affilimart_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - affilimart_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U affilimart_user -d affilimart"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: affilimart_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass affilimart_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - affilimart_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (for analytics and logs)
  mongodb:
    image: mongo:7
    container_name: affilimart_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: affilimart_admin
      MONGO_INITDB_ROOT_PASSWORD: affilimart_mongo_password
      MONGO_INITDB_DATABASE: affilimart_analytics
    volumes:
      - mongodb_data:/data/db
      - ./backend/src/database/mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - affilimart_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (for search functionality)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: affilimart_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - affilimart_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: affilimart_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8000
      DATABASE_URL: postgresql://affilimart_user:affilimart_password@postgres:5432/affilimart
      REDIS_URL: redis://:affilimart_redis_password@redis:6379
      MONGODB_URL: mongodb://affilimart_admin:affilimart_mongo_password@mongodb:27017/affilimart_analytics?authSource=admin
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: affilimart_jwt_secret_key_2024
      JWT_REFRESH_SECRET: affilimart_refresh_secret_key_2024
      FRONTEND_URL: http://localhost:3000
      API_URL: http://localhost:8000
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - affilimart_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: affilimart_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - affilimart_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: affilimart_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./uploads:/var/www/uploads
      - ./frontend/public:/var/www/static
    ports:
      - "80:80"
      - "443:443"
    networks:
      - affilimart_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander (for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: affilimart_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:affilimart_redis_password
    ports:
      - "8081:8081"
    networks:
      - affilimart_network
    depends_on:
      - redis

  # Adminer (for database management)
  adminer:
    image: adminer:latest
    container_name: affilimart_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - affilimart_network
    depends_on:
      - postgres

  # Elasticsearch Head (for Elasticsearch management)
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: affilimart_elasticsearch_head
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - affilimart_network
    depends_on:
      - elasticsearch

  # Prometheus (for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: affilimart_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - affilimart_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (for monitoring dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: affilimart_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: affilimart_grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - affilimart_network
    depends_on:
      - prometheus

  # Mailhog (for email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: affilimart_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - affilimart_network

  # MinIO (for file storage)
  minio:
    image: minio/minio:latest
    container_name: affilimart_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: affilimart_minio_user
      MINIO_ROOT_PASSWORD: affilimart_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - affilimart_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  affilimart_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 